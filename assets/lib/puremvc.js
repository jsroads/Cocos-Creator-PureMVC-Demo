class t{constructor(t,e){this.notify=null,this.context=null,this.setNotifyMethod(t),this.setNotifyContext(e)}setNotifyMethod(t){this.notify=t}setNotifyContext(t){this.context=t}notifyObserver(t){this.getNotifyMethod().call(this.getNotifyContext(),t)}compareNotifyContext(t){return t===this.context}getNotifyMethod(){return this.notify}getNotifyContext(){return this.context}}class e{constructor(){if(this.mediatorMap=null,this.observerMap=null,e.instance)throw Error(e.SINGLETON_MSG);e.instance=this,this.mediatorMap={},this.observerMap={},this.initializeView()}static getInstance(){return e.instance||(e.instance=new e),e.instance}initializeView(){}registerObserver(t,e){const i=this.observerMap[t];i?i.push(e):this.observerMap[t]=[e]}removeObserver(t,e){const i=this.observerMap[t];let s=i.length;for(;s--;){if(i[s].compareNotifyContext(e)){i.splice(s,1);break}}0==i.length&&delete this.observerMap[t]}notifyObservers(t){const e=t.getName(),i=this.observerMap[e];if(i){const e=i.slice(0),s=e.length;for(let i=0;i<s;i++){e[i].notifyObserver(t)}}}registerMediator(e){const i=e.getMediatorName();if(this.mediatorMap[i])return;this.mediatorMap[i]=e;const s=e.listNotificationInterests(),n=s.length;if(n>0){const i=new t(e.handleNotification,e);for(let t=0;t<n;t++)this.registerObserver(s[t],i)}e.onRegister()}retrieveMediator(t){return this.mediatorMap[t]||null}removeMediator(t){const e=this.mediatorMap[t];if(!e)return null;const i=e.listNotificationInterests();let s=i.length;for(;s--;)this.removeObserver(i[s],e);return delete this.mediatorMap[t],e.onRemove(),e}hasMediator(t){return null!=this.mediatorMap[t]}}e.SINGLETON_MSG="View singleton already constructed!";class i{constructor(){if(this.view=null,this.commandMap=null,i.instance)throw Error(i.SINGLETON_MSG);i.instance=this,this.commandMap={},this.initializeController()}static getInstance(){return i.instance||(i.instance=new i),i.instance}initializeController(){this.view=e.getInstance()}executeCommand(t){const e=this.commandMap[t.getName()];if(e){(new e).execute(t)}}registerCommand(e,i){this.commandMap[e]||this.view.registerObserver(e,new t(this.executeCommand,this)),this.commandMap[e]=i}hasCommand(t){return null!=this.commandMap[t]}removeCommand(t){this.hasCommand(t)&&(this.view.removeObserver(t,this),delete this.commandMap[t])}}i.SINGLETON_MSG="Controller singleton already constructed!";class s{constructor(){if(this.proxyMap=null,s.instance)throw Error(s.SINGLETON_MSG);s.instance=this,this.proxyMap={},this.initializeModel()}static getInstance(){return s.instance||(s.instance=new s),s.instance}initializeModel(){}registerProxy(t){this.proxyMap[t.getProxyName()]=t,t.onRegister()}removeProxy(t){const e=this.proxyMap[t];return e&&(delete this.proxyMap[t],e.onRemove()),e}retrieveProxy(t){return this.proxyMap[t]||null}hasProxy(t){return null!=this.proxyMap[t]}}s.SINGLETON_MSG="Model singleton already constructed!";class n{constructor(t,e=null,i){this.name=null,this.body=null,this.type=null,this.name=t,this.body=e,this.type=i}getName(){return this.name}setBody(t){this.body=t}getBody(){return this.body}setType(t){this.type=t}getType(){return this.type}toString(){let t="Notification Name: "+this.getName();return t+="\nBody:"+(null==this.getBody()?"null":this.getBody().toString()),t+="\nType:"+(null==this.getType()?"null":this.getType()),t}}class r{constructor(){if(this.model=null,this.view=null,this.controller=null,r.instance)throw Error(r.SINGLETON_MSG);r.instance=this,this.initializeFacade()}static getInstance(){return r.instance||(r.instance=new r),r.instance}initializeFacade(){this.initializeModel(),this.initializeController(),this.initializeView()}initializeModel(){this.model||(this.model=s.getInstance())}initializeController(){this.controller||(this.controller=i.getInstance())}initializeView(){this.view||(this.view=e.getInstance())}registerCommand(t,e){this.controller.registerCommand(t,e)}removeCommand(t){this.controller.removeCommand(t)}hasCommand(t){return this.controller.hasCommand(t)}registerProxy(t){this.model.registerProxy(t)}retrieveProxy(t){return this.model.retrieveProxy(t)}removeProxy(t){let e;return this.model&&(e=this.model.removeProxy(t)),e}hasProxy(t){return this.model.hasProxy(t)}registerMediator(t){this.view&&this.view.registerMediator(t)}retrieveMediator(t){return this.view.retrieveMediator(t)}removeMediator(t){let e;return this.view&&(e=this.view.removeMediator(t)),e}hasMediator(t){return this.view.hasMediator(t)}notifyObservers(t){this.view&&this.view.notifyObservers(t)}sendNotification(t,e=null,i){this.notifyObservers(new n(t,e,i))}}r.SINGLETON_MSG="Facade singleton already constructed!";class o{constructor(){this.facade=null,this.facade=r.getInstance()}sendNotification(t,e=null,i){this.facade.sendNotification(t,e,i)}}class a extends o{constructor(){super(),this.subCommands=null,this.subCommands=new Array,this.initializeMacroCommand()}initializeMacroCommand(){}addSubCommand(t){this.subCommands.push(t)}execute(t){const e=this.subCommands.slice(0),i=this.subCommands.length;for(let s=0;s<i;s++){(new(0,e[s])).execute(t)}this.subCommands.splice(0)}}class l extends o{execute(t){}}class h extends o{constructor(t="",e=null){super(),this.mediatorName=null,this.viewComponent=null,this.mediatorName=""!==t?t:h.NAME,this.viewComponent=e}getMediatorName(){return this.mediatorName}getViewComponent(){return this.viewComponent}setViewComponent(t){this.viewComponent=t}listNotificationInterests(){return[]}handleNotification(t){}onRegister(){}onRemove(){}}h.NAME="Mediator";class c extends o{constructor(t="",e=null){super(),this.proxyName=null,this.data=null,this.proxyName=""!==t?t:c.NAME,null!=e&&this.setData(e)}getProxyName(){return this.proxyName}setData(t){this.data=t}getData(){return this.data}onRegister(){}onRemove(){}}c.NAME="Proxy";export{i as Controller,r as Facade,a as MacroCommand,h as Mediator,s as Model,n as Notification,o as Notifier,t as Observer,c as Proxy,l as SimpleCommand,e as View};